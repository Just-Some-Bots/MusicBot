# これは、MusicBotの構成ファイルです。 ボットをセットアップするには、このファイルを編集する必要があります。
# メモ帳を使用してこのファイルを編集しないでください。
# 形式が損なわれるため、サクラエディタまたはVisual Studio Codeなどのコードエディターを使用してください。

# IDを取得するには、開発者モードを有効にします（オプション->設定->外観）
# Discordで、取得したい人/チャンネルを右クリックします
# チャンネル、[IDのコピー]をクリックします。 「listids」コマンドを使用することもできます。
# (http://i.imgur.com/GhKpBMQ.gif)


; さまざまなIDを取得する方法:
; http://i.imgur.com/GhKpBMQ.gif
; 開発者モード（オプション、設定、外観）を有効にし、IDが必要なオブジェクトを右クリックして、[IDのコピー]をクリックします。
; これは基本的に、IDが必要なすべてのもの（チャネルとユーザー）で機能します。 ロールについては、ロールのメンションを右クリックする必要があります。


[Credentials]
# これはDiscordボットアカウントトークンです。
# ここでボットのトークンを見つけます： https://discordapp.com/developers/applications/me/
# リダイレクトURIまたはボックスにチェックマークを付けずに、新しいアプリケーションを作成します。
# 次に、アプリケーションページで[ボットユーザーの作成]をクリックし、ここにトークンをコピーします。
Token = bot_token

# ボットは、SpotifyリンクとURIをYouTubeビデオに変換し、
# それらを再生します。 この機能を有効にするには、これら2つのオプションに有効な値を入力してください
# 詳細は、次の指示に従ってください。 https://just-some-bots.github.io/MusicBot/using/spotify/
Spotify_ClientID =
Spotify_ClientSecret =

[Permissions]
# このオプションは、どのユーザーがボットの完全な許可と制御を持っているかを決定します。
# 所有者は1人しか設定できませんが、permissions.iniを使用して他のユーザーに
# 他のコマンドへのアクセスを許可できます。
# このオプションを「auto」に設定すると、ボットの所有者がボットアプリケーションを作成した人に設定されます。 。
# これは通常、あなたが望むものです。
# それ以外の場合は、別のユーザーのIDに変更します
OwnerID = auto

# このオプションは、開発者専用コマンドにアクセスできるユーザーを決定します。
# 開発者専用コマンドは非常に危険であり、誤って使用するとボットが破損する可能性があるため、
# Pythonコードに精通していない限り、
# このオプションを無視することを強くお勧めします。
DevIDs =

# このオプションは、ボットが他のボットに応答する必要があるかどうかを決定します。ボットIDをここでスペースで区切って配置します。
BotExceptionIDs =

[Chat]
# Discordチャットのコマンドの前に使用する必要があるプレフィックスを決定します。
# たとえば、これを*に設定すると、playコマンドは* playを使用してトリガーされます。
CommandPrefix = !

# 特定のテキストチャネルのみをリッスンするようにボットを制限します。
# これを使用するには、ボットが聞きたいテキストチャネルのIDをスペースで区切って追加します。
BindToChannels =

# BindToChannelsの動作を変更します。 通常、BindToChannelsにないチャネルに送信されたメッセージは無視されます。
# このオプションを使用すると、バインドされたチャネルを持たないサーバーでも、
# 他のサーバーでMusic Botの任意のチャネルでコマンドを使用できるように定義されたサーバーを使用できます。
# バインドされたチャネルがないときにyesに設定しても何も起こりません。
AllowUnboundServers = no

# ボットが起動時にサーバーに自動的に参加できるようにします。 これを使用するには、
# ボットが起動時に参加する音声チャネルのIDをスペースで区切って追加します。 各サーバーは1つのチャネルを持つことができます。
# このオプションとAutoSummonが有効になっている場合、このオプションが優先されます。
AutojoinChannels =

# ギルドに送信する代わりに、メッセージを再生するためのダイレクトメッセージを送信します。
# 再生中のメディアを追加したユーザーに送信されます。 現在、自動エントリのメッセージの再生は影響を受けず、
# NowPlayingChannelsの設定に従います。 ボットはダイレクトメッセージを削除しません。
DMNowPlaying = no

# 自動プレイリストを介して、ボットによって自動的に追加されたエントリのメッセージの再生を無効にします。
DisableNowPlayingAutomatic = no

# DMNowPlayingおよびDisableNowPlayingAutomaticの影響を受けないメッセージを再生するために、
# ボットが現在再生中のメッセージを出力するチャネルを決定します。 これがサーバーに指定されていない場合、
# 手動で追加されたエントリの再生メッセージは、ユーザーがコマンドを使用してそのエントリを追加するのと同じチャネルで送信され、
# 自動で追加されたエントリの再生メッセージは同じチャネルに送信されます 可能であれば、
# これがサーバーに指定されていない場合、最後に再生メッセージが送信されました。
# サーバーに複数のチャネルを指定すると、ボットはリストから1つのチャネルのみを選択してメッセージを送信します。
NowPlayingChannels =

# ボットは、以前に送信したメッセージをデフォルトで削除（または編集）しようとします。
# ボットがそれらを削除したくない場合（再生されたもののログを保持するため）、このオプションをオフにします。
DeleteNowPlaying = yes

[MusicBot]
# ボットのボリューム、0.01〜1.0。
DefaultVolume = 0.25

# ホワイトリストに登録されたユーザー(whitelist.txt内)にのみコマンドの使用を許可します。
# 警告：このオプションは廃止されており、ボットの将来のバージョンで削除される予定です。
# 代わりにpermissions.iniを使用してください。
WhiteListCheck = no

# 曲が正常にスキップされるためにスキップすることを投票する人の数、どちらか低い方の値が使用されます。
# 比率とは、チャンネル内の無制限の非所有者ユーザーの割合を指します。
SkipsRequired = 4
SkipRatio = 0.5

# ダウンロードしたビデオをaudio_cacheフォルダーに保存するかどうかを決定します。
# これが「はい」の場合、フォルダー内で検出されて再びキューに入れられた場合、それらは再ダウンロードされません。
# それ以外の場合、ビデオは一時的にフォルダにダウンロードされて再生され、スペースを埋めないように削除されます。
SaveVideos = yes

# 曲の再生開始時にキューに入れたユーザーに言及します。
NowPlayingMentions = no

# 可能な場合、起動時に所有者の音声チャネルに自動的に参加します。
# ボットは同じサーバー上にあり、チャネルに参加する権限を持っている必要があります。
AutoSummon = yes

# チャンネルに参加した後、autoplaylist.txtファイルから曲の再生を開始します。
# これは、ユーザーが曲をキューイングするのを止めるものではありません。
# permissions.iniでコマンドアクセスを制限することで、それを行うことができます。
UseAutoPlaylist = yes

# 自動再生リストが有効なときに曲をランダムな順序で再生するかどうかを設定します。
# いいえの場合、曲は代わりに順番に再生されます。
AutoPlaylistRandom = yes

# 誰かが再び参加するまで、音声チャンネルに誰もいないときに音楽を一時停止します。
AutoPause = yes

# しばらくしてからボットのメッセージを自動的にクリーンアップします。
DeleteMessages = yes

# これとDeleteMessagesが有効な場合、ボットはコマンドを呼び出した他のユーザーからのメッセージも削除しようとします。
# ボットには、このための「メッセージの管理」権限が必要です。
DeleteInvoking = no

# 定期的にキューをディスクに保存します。 その後、ボットがシャットダウンされると、
# キューは中断したところから再開します。
PersistentQueue = yes

# コンソールに記録するメッセージを決定します。
# デフォルトのレベルはINFOです。これは、平均的なユーザーが必要とするすべてのものです。
# 他のレベルには、CRITICAL, ERROR, WARNING, DEBUG, VOICEDEBUG, FFMPEG, NOISY,およびEVERYTHINGが含まれます。
# デバッグしている場合、またはボットのコンソール出力をより静かにする場合にのみ、これを変更する必要があります。
DebugLevel = INFO

# ボットのステータスとして使用するカスタムメッセージを指定します。
# 空のままにすると、ボットは現在再生中の音楽に関する動的な情報を代わりに表示します。
StatusMessage = 

# ボットが現在再生しているものをdata/<server id>/current.txtファイルに書き込みます。
# これは、OBSおよび動的入力を受け取る他のすべてで使用できます。
WriteCurrentSong = no

# 所有者がすべての曲を即座にスキップできる機能と同様に、曲をキューに入れた人が自分の曲を即座にスキップできるようにします。
AllowAuthorSkip = yes

# 実験的なイコライゼーションコードを有効にします。
# これにより、最初に曲を再生しているときに、処理の消費が大きくなりますが、すべての曲の音量が同じように聞こえます。
UseExperimentalEqualization = no

# ボット全体で埋め込みを使用できるようにします。
# これらはきれいに見えるようにフォーマットされたメッセージですが、
# Discord設定でリンクプレビューが無効になっているユーザーには表示されません。
UseEmbeds = yes

# queueコマンドの使用時に表示するアイテムの量。
QueueLength = 10

# 曲の再生中にエラーが発生した場合、オートプレイリストから曲を削除します。
# 有効にすると、再生できない曲は別のファイルに移動され、自動再生リストから削除されます。
# インターネットの問題または曲の再生で頻繁に問題が発生する場合は、これを無効にすることができます。
RemoveFromAPOnError = yes

# 起動時にボットの構成をコンソールに表示するかどうか。
ShowConfigOnLaunch = no

# レガシースキップ動作を使用するかどうか。 これにより、権限のある人が「skip f」を使用して曲を強制スキップする必要がなくなり、
# 代わりにデフォルトで強制スキップされます。
LegacySkip = no

# オーナーが見つからない場合はサーバーを離れます。
LeaveServersWithoutOwner = no

# aliases.jsonで定義されているコマンドエイリアスを使用します。
UseAlias = yes

#独自BGM枠用指定時間カットモード
BgmWakuMode = yes

[Files]
# i18nファイルへのパス。 何をするのかわからない場合は、これを設定しないでください。
i18nFile = 
