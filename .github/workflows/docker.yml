name: CI

on:
  push:
    branches:
      - 'main'
      - 'master'
    tags:
      - '*.*.*'
    paths:
      - 'Dockerfile*'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'requirements.txt'
      - '**.py'
      - '**.sh'
      - '.dockerignore'
      - '.env.example'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  REGISTRY_URL: ${{ vars.REGISTRY_URL }}
  REGISTRY_USER: ${{ vars.REGISTRY_USER }}

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set password by container registry
        run: |
          case "${{ env.REGISTRY_URL }}" in
            "ghcr.io")
              echo "REGISTRY_PASS=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
              ;;
            *)
              if [ -n "${{ secrets.REGISTRY_PASS }}" ]; then
                echo "REGISTRY_PASS=${{ secrets.REGISTRY_PASS }}" >> $GITHUB_ENV
              else
                echo "REGISTRY_PASS secret is not set and registry is not recognized. Exiting..."
                exit 1
              fi
              ;;
          esac

      - name: Log into container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: Extract image name from Dockerfile
        id: image_name
        run: |
          IMAGE=$(grep "LABEL org.opencontainers.image.title" Dockerfile | cut -d'"' -f2)
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_URL }}/${{ env.REGISTRY_USER }}/${{ steps.image_name.outputs.IMAGE }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.REGISTRY_USER }}/${{ steps.image_name.outputs.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_URL }}/${{ env.REGISTRY_USER }}/${{ steps.image_name.outputs.IMAGE }}:buildcache,mode=max
